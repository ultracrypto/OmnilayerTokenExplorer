@using Microsoft.AspNetCore.Mvc.Localization
@using CoreExplorerV3.Helpers
@inject IViewLocalizer Localizer
@inject IHtmlLocalizer<SharedResources> SharedLocalizer
@model CoreExplorerV3.Models.AddressViewModel

@section Styles {
    <style>
        .custom-datatable {
            margin-top: 0;
            padding-top: 0 !important;
            padding-bottom: 0 !important;
        }

        .pagination {
            padding-top: 20px;
            padding-bottom: 20px;
            padding-right: 20px;
        }

        .dataTables_paginate {
            text-align: center;
        }

        .dataTables_processing {
            display: block;
            position: relative !important;
            margin-top: 5px !important;
            margin-bottom: 5px !important;
        }
    </style>
}
@section Scripts {
    <!-- Dependencies -->
    <script>
        var hash = window.location.hash.substr(1);
        var result = hash.split('&').reduce(function (result, item) {
            var parts = item.split('=');
            result[parts[0]] = parts[1];
            return result;
        }, {});
        $(function () {
            $('#txaddr').dataTable({
                processing: true,
                serverSide: true,
                keepConditions: true,
                ajax: {
                    url: "/get_address_transactions?address=@Model.Address.ToLower()",
                    data: function (d) {
                        if (typeof (result["txaddr"]) !== "undefined") {
                            console.log(result["txaddr"]);
                            var start = result["txaddr"].substr(1) * 50
                            d.start = start;
                            result = [];
                        }
                    }
                },
                searching: false,
                info: false,
                sorting: false,
                "sDom": @if (Model.AddressInfo.Transactions > 50) { @Html.Raw("'ptrp'"); } else { @Html.Raw("'tr'"); },
                bSort: false,
                order: [],
                pageLength: 50,
                language: {
                        paginate: {
                            "previous": "@SharedLocalizer["Prev"]",
                        "next": "@SharedLocalizer["Next"]"
                        },
                    'loadingRecords': '&nbsp;',
                    'processing': '<div class="txloader"></div><div class="txtext">@SharedLocalizer["Loading..."]</div>',
                    'emptyTable': "@SharedLocalizer["No transactions found"]"
                },
                fnRowCallback: function (row, data, index) {
                        if (data[6] == "False") {
                            $(row).find('td:eq(3)').css('background-color', '#ff0000');
                            $(row).find('td:eq(3)').css('color', '#FFFFFF');
                        } else if (data[3] > 0) {
                            $(row).find('td:eq(3)').css('background-color', '#dff0d8');
                        } else if (data[3] < 0) {
                            $(row).find('td:eq(3)').css('background-color', '#f2dede');
                        }
                    },
                columns: [
                    {
                        title: "@SharedLocalizer["Timestamp"]"
                    },
                    {
                        title: "@SharedLocalizer["Block"]",
                        render: function (data, type, row) {
                            return '<a href="@ViewBag.AppendUrl/block/' + data+'">' + data+'</a>';
                        }

                    },
                    {
                        title: "@SharedLocalizer["Hash"]",
                        render: function (data, type, row) {
                            return '<div class="cell-address-tx" style="min-width:100px"><div class="cell-overflow-address-tx"><a href="@ViewBag.AppendUrl/transaction/' + data+'">' + data+'</a></div></div>';
                        }
                    },
                    {
                        title: "@SharedLocalizer["Amount"] (@Model.MainCoinModel.CoinSymbol)",
                        render: function (data, type, row) {
                            if (row[6] == "True") {
                                return '<div style="min-width:100px">' + data + '</div>';
                            } else {
                                return '<div style="min-width:100px">@SharedLocalizer["Invalid TX"]</div>';
                            }
                        }
                    },
                    {
                        title: "@SharedLocalizer["Balance"] (@Model.MainCoinModel.CoinSymbol)",
                        render: function (data, type, row) {
                            return '<div style="min-width:100px">' + data + '</div>';
                        }
                    },
                    {
                        title: "@SharedLocalizer["TX Type"]",
                        render: function (data, type, row) {
                            if (data == "DEVELOPER")
                            {
                                return '<img src="/images/dev.png" width="24" height="24" title="@SharedLocalizer["Incoming transaction"]" />';
                            }
                            else if (data == "IN")
                            {
                                return '<img src="/images/left.png" width="24" height="24" title="@SharedLocalizer["Incoming transaction"]" />';
                            }
                            else if (data == "OUT")
                            {
                                return '<img src="/images/right.png" width="24" height="24" title="@SharedLocalizer["Outgoing transaction"]" />';
                            }
                        }
                    },
                ]
            });
            $('.index-datatable').show();
        });
    </script>
}
@{
    ViewData["Title"] = string.Format(SharedLocalizer["{0} address {1}"].Value, ViewBag.CoinName.ToString(), AmountHelper.AddressToClaim(Model.Address, ViewBag.Claims));
}

<div class="font-weight-bold py-3 mb-4 d-flex">
    <div>
        <img src="~/images/coins_custom/@{WriteLiteral(Model.MainCoinModel.V3Logo);}_45.png" width="45" height="45" id="logo_45" />
    </div>
    <div class="ml-1">
        <h4 class="font-weight-bold margin0 wrap-long">@AmountHelper.AddressToClaim(Model.Address, ViewBag.Claims)</h4>
        <div class="text-muted small mt-1 font-weight-normal">
            @string.Format(SharedLocalizer["{0} address"].Value, ViewBag.CoinName.ToString())
            <a href="@ViewBag.AppendUrl/claim_form/?address=@Model.Address" style="text-decoration: underline">[@SharedLocalizer["Claim"]]</a>
        </div>
    </div>
</div>

@if (Model.IsUnconfirmed)
{
    <div class="alert alert-info">
        <b>@SharedLocalizer["Important information!"]</b>
        <br />@SharedLocalizer["Unconfirmed transaction! Block may become orphan and will be excluded from best block chain"]
        <br />@SharedLocalizer["Block is not indexed yet and may be slow to display."]
    </div>
}

<div class="row">
    <div class="col-md-6 col-lg-6 col-xl-3">
        <div class="card mb-4  @if (Model.AddressInfo.Transactions > 0) { @Html.Raw("wallet-cart-min-height"); }">
            <div class="card-header custom-padding-header custom-padding-header-index">
                <span class="ion ion-md-checkmark-circle text-large text-info"></span>
                <span class="text-big text-cart-padd">@SharedLocalizer["Balance"]</span>
            </div>
            <div class="card-body custom-padding custom-padding-header-index">
                <div class="d-flex align-items-center">
                    <div class="ml-0">
                        <div class="text-large text-truncate" title="@Model.AddressInfo.Total @Model.MainCoinModel.CoinSymbol">@Model.AddressInfo.Total.ToString("G29")</div>
                        @if (Model.AddressInfo.Transactions > 0)
                        {
                            <div class="text-truncate">@AmountHelper.BTCHelperString(Model.AddressInfo.Total * Model.ExchangePrice.Avg)</div>
                            <div class="text-truncate">
                                @AmountHelper.FiatHelper(Model.AddressInfo.Total * Model.ExchangePrice.Avg * Model.ExchangeFiat.USD, "$")
                            </div>
                            <div class="text-truncate">
                                @AmountHelper.FiatHelper(Model.AddressInfo.Total * Model.ExchangePrice.Avg * Model.ExchangeFiat.EUR, "€")
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-lg-6 col-xl-3">
        <div class="card mb-4 @if (Model.AddressInfo.Transactions > 0) { @Html.Raw("wallet-cart-min-height"); }">
            <div class="card-header custom-padding-header custom-padding-header-index">
                <span class="ion ion-ios-arrow-dropleft-circle text-large text-success"></span>
                <span class="text-big text-cart-padd">@SharedLocalizer["Total received"]</span>
            </div>
            <div class="card-body custom-padding custom-padding-header-index">
                <div class="d-flex align-items-center">
                    <div class="ml-0">
                        <div class="text-large text-truncate" title="@Model.AddressInfo.Received @Model.MainCoinModel.CoinSymbol">@Model.AddressInfo.Received.ToString("G29")</div>
                        @if (Model.AddressInfo.Transactions > 0)
                        {
                            <div class="text-truncate">@AmountHelper.BTCHelperString(Model.AddressInfo.Received * Model.ExchangePrice.Avg)</div>
                            <div class="text-truncate">
                                @AmountHelper.FiatHelper(Model.AddressInfo.Received * Model.ExchangePrice.Avg * Model.ExchangeFiat.USD, "$")
                            </div>
                            <div class="text-truncate">
                                @AmountHelper.FiatHelper(Model.AddressInfo.Received * Model.ExchangePrice.Avg * Model.ExchangeFiat.EUR, "€")
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-lg-6 col-xl-3">
        <div class="card mb-4 @if (Model.AddressInfo.Transactions > 0) { @Html.Raw("wallet-cart-min-height"); }">
            <div class="card-header custom-padding-header custom-padding-header-index">
                <span class="ion ion-ios-arrow-dropright-circle text-large text-danger"></span>
                <span class="text-big text-cart-padd">@SharedLocalizer["Total sent"]</span>
            </div>
            <div class="card-body custom-padding custom-padding-header-index">
                <div class="d-flex align-items-center">
                    <div class="ml-0">
                        <div class="text-large text-truncate" title="@Model.AddressInfo.Sent @Model.MainCoinModel.CoinSymbol">@Model.AddressInfo.Sent.ToString("G29")</div>
                        @if (Model.AddressInfo.Transactions > 0)
                        {
                            <div class="text-truncate">@AmountHelper.BTCHelperString(Model.AddressInfo.Sent * Model.ExchangePrice.Avg)</div>
                            <div class="text-truncate">
                                @AmountHelper.FiatHelper(Model.AddressInfo.Sent * Model.ExchangePrice.Avg * Model.ExchangeFiat.USD, "$")
                            </div>
                            <div class="text-truncate">
                                @AmountHelper.FiatHelper(Model.AddressInfo.Sent * Model.ExchangePrice.Avg * Model.ExchangeFiat.EUR, "€")
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6 col-lg-6 col-xl-3">
        <div class="card mb-4 @if (Model.AddressInfo.Transactions > 0) { @Html.Raw("wallet-cart-min-height"); }">
            <div class="card-header custom-padding-header custom-padding-header-index">
                <span class="ion ion-ios-arrow-dropdown-circle text-large text-warning"></span>
                <span class="text-big text-cart-padd">@SharedLocalizer["Total transactions"]</span>
            </div>
            <div class="card-body custom-padding custom-padding-header-index custom-flex-display">
                <div class="d-flex align-items-center">
                    <div class="ml-0">
                        @if (Model.AddressInfo.Transactions > 0)
                        {
                            <div class="text-large text-truncate" style="font-size: 40px !important">@Model.AddressInfo.Transactions</div>
                        }
                        else
                        {
                            <div class="text-large text-truncate">0</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-header with-elements">
        <div class="card-header-title font-weight-semibold">@SharedLocalizer["Transactions of address"]</div>
        <div class="card-header-elements ml-auto">
        </div>
    </div>
    <div class="card-datatable table-responsive custom-datatable">
        <table id="txaddr" class="table table-striped table-bordered" style="margin: 0 !important;">
            <thead>
                <tr>
                    <th style="min-width:130px">@SharedLocalizer["Timestamp"]</th>
                    <th>@SharedLocalizer["Block"]</th>
                    <th>@SharedLocalizer["Hash"]</th>
                    <th>@SharedLocalizer["Amount"] (@Model.MainCoinModel.CoinSymbol)</th>
                    <th>@SharedLocalizer["Balance"] (@Model.MainCoinModel.CoinSymbol)</th>
                    <th style="max-width:55px">@SharedLocalizer["TX Type"]</th>
                </tr>
            </thead>
        </table>
    </div>
</div>
